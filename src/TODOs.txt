


Implementation:

- Enable output of the sampled panel in VCF format (standalone command) and genotyping command (make optional)
	* overload separate_variants function to work with SampledPanel objects (DONE)
	* overload write function for writing phased panel VCF with resulting Variants/SampledPanel objects (DONE)
	* In command PanGenie-sample: output final sampled panel VCF in the end (DONE)
	* In command PanGenie-genotype: make it optional to output the phased panel in the end: do this as last step after genotyping is done by:
		(1) create list of SampledPanel objects from UniqueKmers objects right before they go out of stepwiseuniquekmercomputer (DONE)
		(2) use SampledPanel objects together with Graph objects to output the panel VCF (using the above functions) (DONE)

Still misses (proper) testcases:

- HaplotypeSampler: update_unique_kmers (DONE)
- Variant: separate_variants with SampledPanel (DONE)
- SampledPath: get_specific_alleles (DONE)
- Graph: write_sampled_panel (DONE)
- Commands: 
	- generate testcase for small region (DONE)
	- determine expected likelihooods (obtained from UniqueKmers objects + HMM) (DONE)
	- check that running command produces the same results (DONE)

Figure out how to treat cases with only 0 alleles, they are reported with ./. genotypes. Is that the same for cases where there are e.g. only 1s? (DONE)

Testing steps:
run sampling on real world data with standalone tool to see how well it performs
does genotyping improve with this step, or at least not get worse?
check runtime and memory with sampling, what are the bottlenecks?


Make sure the -x argument is not larger than the size of the panel

Polishing the code:
- increase variable sizes for alleles: now unsigned char --> convert to unsigned short to allow for more alleles/paths
- experiment with alternative ways of implementing KmerPath objects (allele to kmer mapping)
- experiment with smaller hash sizes for jellyfish (does this decrease memory with still exceptable speed?)